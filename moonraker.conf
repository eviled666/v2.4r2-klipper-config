[server]
host: 0.0.0.0
port: 7125
klippy_uds_address: /home/edwin/printer_data/comms/klippy.sock

[authorization]
trusted_clients:
    172.16.0.0/16
    10.0.0.0/8
    127.0.0.0/8
    169.254.0.0/16
    172.16.0.0/12
    192.168.0.0/16
    FE80::/10
    ::1/128
cors_domains:
    http://*.lan
    http://*.local
    https://my.mainsail.xyz
    http://my.mainsail.xyz
    https://app.fluidd.xyz
    http://app.fluidd.xyz
enable_api_key: True

[power spider]
type: gpio
pin: !gpiochip0/gpio26
initial_state: on
off_when_shutdown: True
locked_while_printing: True
on_when_job_queued: True
bound_service: klipper
restart_klipper_when_powered: True 
restart_delay: 4

[power topleds]
type: gpio
pin: !gpiochip0/gpio20
initial_state: on
off_when_shutdown: True
locked_while_printing: False
on_when_job_queued: True
#bound_service: klipper
restart_klipper_when_powered: False 


[history]

[file_manager]
enable_object_processing: True

[update_manager]
channel: dev
refresh_interval: 168

[update_manager mainsail]
type: web
channel: stable
repo: mainsail-crew/mainsail
path: ~/mainsail

#[update_manager client z_calibration]
#type: git_repo
#path: ~/klipper_z_calibration
#origin: https://github.com/protoloft/klipper_z_calibration.git
#install_script: install.sh
#managed_services: klipper

[update_manager timelapse]
type: git_repo
primary_branch: main
path: ~/moonraker-timelapse
origin: https://github.com/mainsail-crew/moonraker-timelapse.git
managed_services: klipper moonraker

[update_manager Klipper-Adaptive-Meshing-Purging]
type: git_repo
channel: dev
path: ~/Klipper-Adaptive-Meshing-Purging
origin: https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging.git
managed_services: klipper
primary_branch: main

[timelapse]
##   Following basic configuration is default to most images and don't need
##   to be changed in most scenarios. Only uncomment and change it if your
##   Image differ from standart installations. In most common scenarios 
##   a User only need [timelapse] in there configuration.
output_path: ~/timelapse/
##   Directory where the generated video will be saved
frame_path: /tmp/timelapse/
##   Directory where the temporary frames are saved
ffmpeg_binary_path: /usr/bin/ffmpeg
##   Directory where ffmpeg is installed

[notifier discord]
url: https://discord.com/api/webhooks/801548029349593088/B-O_pvpZaZ9mcvhVjzSruXLGnXBsh-s6yVNL_PxGKk8wZYjuatVFT_BvUMlSRkOJ3KHh
#   The url for your notifier. This URL accepts Jinja2 templates, so you can use [secrets] if you want.
events: *
#   The events this notifier should trigger to. '*' means all events.
#   You can use multiple events, comma separated.
#   Valid events:
#      started
#      complete
#      error
#      cancelled
#      paused
#      resumed
body: "Your printer status has changed to {event_name}"
#   The body of the notification. This option accepts Jinja2 templates.
#   You can use {event_name} to print the current event trigger name. And {event_args} for
#   the arguments that came with it. When using the notify functionality in a macro context, you can
#   use {event_message} to print out your message.
title:
#   The optional title of the notification. Just as the body, this option accepts Jinja2 templates.
attach: http://172.16.20.122/webcam/?action=snapshot
#   An optional attachment. Can be an url of a webcam for example. Note: this isn't available for all
#   notification services. You can check if it's supported on the Apprise Wiki. Be aware that links in
#   your internal network can only be viewed within your network.


[octoprint_compat]
enable_ufp: True
#   When set to True the octoprint_compat module will report that the UFP
#   plugin is available.  If the installed version of Cura supports UFP
#   files will be uploaded in UFP format.  When set to False Cura will
#   upload files in .gcode format.  This setting has no impact on other
#   slicers.  The default is True.
#flip_h: False
#   Set the webcam horizontal flip.  The default is False.
#flip_v: False
#   Set the webcam vertical flip.  The default is False.
#rotate_90: False
#   Set the webcam rotation by 90 degrees.  The default is False.
stream_url: http://172.16.20.122/webcam/?action=stream
#   The URL to use for streaming the webcam.  It can be set to an absolute
#   URL if needed. In order to get the webcam to work in Cura through
#   an OctoPrint connection, you can set this value to
#   http://<octoprint ip>/webcam/?action=stream.  The default value is
#   /webcam/?action=stream.
webcam_enabled: True
#   Enables the webcam.  The default is True.

[update_manager led_effect]
type: git_repo
path: ~/klipper-led_effect
origin: https://github.com/julianschill/klipper-led_effect.git
is_system_service: False

[update_manager cartographer]
type: git_repo
path: ~/cartographer-klipper
channel: stable
origin: https://github.com/Cartographer3D/cartographer-klipper.git
is_system_service: False
managed_services: klipper
info_tags:desc=Cartographer Probe

[update_manager happy-hare]
type: git_repo
path: ~/Happy-Hare
origin: https://github.com/moggieuk/Happy-Hare.git
primary_branch: main
managed_services: klipper

[mmu_server]
enable_file_preprocessor: True
enable_toolchange_next_pos: True
update_spoolman_location: True

