[gcode_macro _CG28]
gcode:
    STATUS_HOMING
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro M600]
gcode:
    PAUSE

[gcode_macro START_PRINT]
gcode:
      #Get Printer built volume dimensions
      {% set X_MAX = printer.toolhead.axis_maximum.x|default(350)|float %}
      {% set Y_MAX = printer.toolhead.axis_maximum.y|default(350)|float %}
      {% set Z_MAX = printer.toolhead.axis_maximum.z|default(330)|float %}

      #Get Nozzle diameter and filament width for conditioning
      {% set NOZZLE = printer.extruder.nozzle_diameter|default(0.4)|float %}

      #Get Bed and Extruder temperature from Slicer GCode
      {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
      {% set HOTEND_TEMP = params.HOTEND_TEMP|default(205)|float %}
      {% set target_chamber = params.CHAMBER|default("40")|int %}
      #Preheat nozzle and bed
      STATUS_OFF
      STATUS_HEATING
      #STOP_LED_EFFECTS LEDS="neopixel:topleds"
      SET_LED_EFFECT EFFECT="topleds_heat" REPLACE=1
      M104 S150                        
      M140 S{BED_TEMP}       
      SET_LED_EFFECT EFFECT="topleds_homing" REPLACE=1
      G28
      #kamp
      #SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 LED_ENABLE=1 FUZZ_ENABLE=1
      #SETUP_VORON_PURGE DISPLAY_PARAMETERS=1 ADAPTIVE_ENABLE=1
      #Move up to clean bed
      G1 Y{Y_MAX - 50} Z{Z_MAX/4.0} F6000                
      #Heat nozzle and bed
      M190 S{BED_TEMP}                               
      M109 S150
      STATUS_OFF
      STATUS_LEVELING
      QUAD_GANTRY_LEVEL
      STATUS_OFF
      STATUS_HOMING
      G28Z
      STATUS_OFF
      STATUS_MESHING
      BED_MESH_CLEAR
      BED_MESH_CALIBRATE PRINT_MIN={params.PRINT_MIN} PRINT_MAX={params.PRINT_MAX} FORCE_NEW_MESH=True
      STATUS_OFF
      STATUS_HEATING
      M109 S{HOTEND_TEMP} T0
      #Precondition extruder
      VORON_PURGE
      STATUS_OFF
      STATUS_READY
      #STOP_LED_EFFECTS LEDS="neopixel:topleds"
      SET_LED_EFFECT EFFECT="topleds_print" REPLACE=1

[gcode_macro END_PRINT]
gcode:
        #Get Printer built volume dimensions
        {% set X_MAX = printer.toolhead.axis_maximum.x|default(100)|float %}
        {% set Y_MAX = printer.toolhead.axis_maximum.y|default(100)|float %}

        #Fix-up extruder
        G91                                            
        G1 E-2 F2700                                    
        G1 E-1.5 Z0.2 F2400                        
        G1 X5 Y5 F6000                               
        G1 Z10                                     
        G90                                        

        #Present print
        G1 Z{printer.toolhead.position.z + 25} F600
        G1 X{X_MAX / 2} Y{Y_MAX / 2} F6000
        M106 S0                                      
        M104 S0                                       
        M140 S0                                 

        #Disable Steppers
        M84 X Y E
        STATUS_OFF
        STATUS_READY
        #STOP_LED_EFFECTS LEDS="neopixel:topleds"
        SET_LED_EFFECT EFFECT="topleds_complete" REPLACE=1

[gcode_macro PA_CAL]
# Pressure Advance Simple Test macro, using .4mm nozzle. 
# Usage: PA_CAL BED=100 EXTRUDER=240 
# First prints a line with current set PA, then prints 20 line segments # starting with 0 PA, increasing each line by 0.005.
gcode:
    {% set BED = params.BED|default(60)|float %}
    {% set EXTRUDER = params.EXTRUDER|default(210)|float %}
    START_PRINT BED_TEMP={BED} EXTRUDER_TEMP={EXTRUDER}

    G21 ; Millimeter units
    G90 ; Absolute XYZ
    M83 ; Relative E
    SET_VELOCITY_LIMIT ACCEL=3000 ACCEL_TO_DECEL=1500
    G92 E0
    M106 S0 

    G1 X120 Y70 F30000            ; move to start position
    G1 Z0.25 F300                 ; move to layer height
    G1 E0.75 F1800                ; un-retract
    G1 X140 Y70 E0.91798 F300     ; print line part one
    G1 X180 Y70 E1.83596 F9000    ; print line part two
    G1 X200 Y70 E0.91798 F300     ; print line part three
    G1 E-0.75 F1800               ; retract
    G1 Z1 F300                    ; Move above layer height  

    {% for i in range(0, 20) %}
      SET_PRESSURE_ADVANCE ADVANCE={i*0.005} ; set Pressure Advance
      M117 Testing Pressure Advance at: {i*0.005}
      G1 X120 Y{100+(5*i)} F30000            ; move to start position
      G1 Z0.25 F300                          ; move to layer height
      G1 E0.75 F1800                         ; un-retract
      G1 X140 Y{100+(5*i)} E0.91798 F300     ; print line part one
      G1 X180 Y{100+(5*i)} E1.83596 F9000    ; print line part two
      G1 X200 Y{100+(5*i)} E0.91798 F300     ; print line part three
      G1 E-0.75 F1800                        ; retract
      G1 Z1 F300                             ; Move above layer height  
    {% endfor %}

      END_PRINT

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}


# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern
            # Diagonals
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            
            # Box
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
        
        # Small pattern
            # Small diagonals 
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            
            # Small box
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        G28
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED